{"data":{"markdownRemark":{"html":"<h4 id=\"lets-explore-in-detail-how-to-write-clean-safe-enterprise-grade-typescript-code\"><a href=\"#lets-explore-in-detail-how-to-write-clean-safe-enterprise-grade-typescript-code\" aria-label=\"lets explore in detail how to write clean safe enterprise grade typescript code permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Let’s explore in detail how to write clean, safe, enterprise-grade Typescript code</h4>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*xxzCZ_x7oeKlq_NRTw6GeA.jpeg\"></p>\n<p>Before we get started, I want to give my checklist for “scalable code”; in the case of this article, Typescript code:</p>\n<ul>\n<li>it is clean, well-formatted, readable code</li>\n<li>it is well-designed, consistent and predictable</li>\n<li>it is easy to extend</li>\n<li>last but not least, it is bug-free</li>\n</ul>\n<p>Since its introduction, Typescript has helped us solve some of the biggest problems with the Javascript ecosystem thanks to its tooling and its powerful static analysis.</p>\n<p>In my experience, though, many teams <strong>only leverage a very small part</strong> of the features that Typescript provides us.</p>\n<p>Some argue that:</p>\n<ul>\n<li>it is time-consuming</li>\n<li>typing our code does not reduce its bugs</li>\n<li>it’s harder and more difficult for junior developers to get started with</li>\n</ul>\n<p>And I am not here to prove them wrong. Cause thing is, they may be right.</p>\n<p>But Typescript doesn’t have to be scary, and in my opinion, writing code using it properly largely outweighs the cons mentioned above.</p>\n<p>In this article, I want to discuss and explore the best tooling and practices to <strong>make Typescript worth our time</strong>.</p>\n<h2 id=\"use-linters-and-formatters\"><a href=\"#use-linters-and-formatters\" aria-label=\"use linters and formatters permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use Linters and Formatters</h2>\n<p>As stated above, we want our Typescript code to be clean, well-formatted and readable.</p>\n<p>In one <a href=\"https://medium.com/r/?url=https%3A%2F%2Fitnext.io%2Fenforce-your-team-coding-style-with-prettier-and-tslint-9faac5016ce7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">of my previous articles</a>, I wrote a guide for setting up <em>Prettier</em> and <em>TsLint</em> in order to keep our code consistent for the whole team. As I may be repeating myself too often, I won’t go too much in detail in regards to why and how to set up these tools. </p>\n<p>Instead, I want to focus on the impact of the benefits to your team from using these tools.</p>\n<p>Whether you’re using EsLint, TsLint, Prettier or all of them, I can’t stress enough that providing consistency to our codebases is one of the most impactful things in terms of productivity for an efficient team. </p>\n<p>A familiar codebase:</p>\n<ul>\n<li>is easier to read and work with</li>\n<li>is easier to understand and get started with</li>\n<li>is easier to modify</li>\n<li>is easier to review</li>\n<li>reduces frictions within a team</li>\n</ul>\n<p>And anyone who’s worked in this industry long enough knows far too well how important the last point is. </p>\n<p>For a business, frictions, and misunderstandings among colleagues are worst than bad code and worse than bugs. </p>\n<p>And programmers happen to care about formatting quite a lot.</p>\n<p>By reducing to the minimum the amount of time spent arguing on code reviews, meetings, and calls, we make the business more efficient as a result. </p>\n<p>The time spent reviewing where a semicolon is positioned is instead spent checking that the business logic of the code is correct, or that the performance of a function is optimal. That’s what a code review should be.</p>\n<blockquote>\n<p>A happy team is a team is an efficient one. Keep your Typescript clean with linters and formatters.</p>\n</blockquote>\n<h2 id=\"use-strict-compiler-options\"><a href=\"#use-strict-compiler-options\" aria-label=\"use strict compiler options permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use Strict Compiler options</h2>\n<p>One of Typescript’s biggest help comes from enabling its strict mode compiler. In order to enable strict mode, you just need to change the compiler options file located in your <code class=\"language-text\">_tsconfig.json_</code><em>:</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&quot;compilerOptions&quot;: {  \n    ... // more  \n    &quot;strict&quot;: true  \n}</code></pre></div>\n<p>By enabling this option, as a result of the other strict options will also be enabled by default.</p>\n<h3 id=\"strict-null-checks\"><a href=\"#strict-null-checks\" aria-label=\"strict null checks permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Strict Null Checks</h3>\n<p>A strict compiler will help us catch possible errors that may happen at runtime.</p>\n<p><code class=\"language-text\">_strictNullChecks_</code> is, in my opinion, the most important option to make your compiler help you prevent such errors. </p>\n<p>In conjunction with correct typing, this option will warn us when we are trying to access a possibly <code class=\"language-text\">null</code> or <code class=\"language-text\">undefined</code> value.</p>\n<p>This is probably one of the most common causes of runtime errors in our applications, and we can finally get help to avoid them as much as possible.</p>\n<p>If you have a been a Javascript developer for more than 2 hours before reading this article, you may have seen this in your console:</p>\n<blockquote>\n<p><em>Uncaught TypeError: Cannot read property ‘property’ of undefined</em></p>\n</blockquote>\n<p>Oh, I have. <strong>Thousands of times</strong>.</p>\n<p>But… not so much lately, thanks to Typescript.</p>\n<p>So how exactly does <code class=\"language-text\">_strictNullChecks_</code> help us? </p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*SuRzMd87h2lH9tqgyNKj_w.png\"></p>\n<p>Let’s break down this example:</p>\n<ul>\n<li>we have some boolean called <code class=\"language-text\">_x_</code></li>\n<li>we have a declared function <code class=\"language-text\">_logger_</code></li>\n<li>we want to call <code class=\"language-text\">_logger_</code> with a variable called <code class=\"language-text\">_msg_</code>  that could also be undefined</li>\n</ul>\n<p>And the compiler is, rightly and gently, letting me know that if <em>logger</em> accepts an argument that I type as string, then I can only pass an argument that is only and always a string.</p>\n<p>If I type <em>logger’s msg</em> argument  as a string, then I cannot call String’s methods.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*kQLu2mtugqhAWYJpM61JiQ.png\"></p>\n<p>These examples look as trivial and extremely simple, but it’s incredibly common to find similar situations in professional codebases. </p>\n<p>The good thing is, <em>strictNullChecks</em> helps us in much more contrived scenarios.</p>\n<h2 id=\"type-well-type-often\"><a href=\"#type-well-type-often\" aria-label=\"type well type often permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type well, Type often</h2>\n<h3 id=\"honest-typing\"><a href=\"#honest-typing\" aria-label=\"honest typing permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Honest typing</h3>\n<p>Some of you may be thinking if the term “honest” is due to my limited English skills or if there’s more to it. What’s honest typing?</p>\n<ul>\n<li>Say we have a back-end API that returns the price object of a financial product</li>\n<li>Not all responses contain an <em>ask price</em> or a <em>bid price</em></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token punctuation\">{</span>  \n    <span class=\"token string\">\"correlationId\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token string\">\"askPrice\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1213.45</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token string\">\"bidPrice\"</span><span class=\"token punctuation\">:</span> undefined  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let’s create a Typescript interface for this:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Price</span> <span class=\"token punctuation\">{</span>  \n    correlationId<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>  \n    askPrice<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>  \n    bidPrice<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Is that correct? Certainly not. </p>\n<p>I have heard several reasons why programmers won’t fully type nullable values:</p>\n<blockquote>\n<p>I’m lazy, the compiler will complain</p>\n</blockquote>\n<blockquote>\n<p>98% of times it’s not undefined</p>\n</blockquote>\n<blockquote>\n<p>“I have no idea what that does“</p>\n</blockquote>\n<p>We want to tell the compiler that <code class=\"language-text\">askPrice</code> and <code class=\"language-text\">bidPrice</code> might be <code class=\"language-text\">undefined</code>. The compiler, as a result, will warn us when we’re trying to access these properties without checking the type or if they exist beforehand.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Price</span> <span class=\"token punctuation\">{</span>  \n    correlationId<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>  \n    askPrice<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>  \n    bidPrice<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// or</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Price</span> <span class=\"token punctuation\">{</span>  \n    correlationId<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>  \n    askPrice<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> undefined<span class=\"token punctuation\">;</span>  \n    bidPrice<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> undefined<span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>That means <strong>the compiler helps us avoid runtime errors</strong> when that 2% of times do happen.</p>\n<p>Honest typing also helps our new coworkers or users of our libraries to fully understand the domain entities of the application. </p>\n<p>There’s literally no reason why your client-side entities shouldn’t fully and strictly be typed as their back-end counterparts.</p>\n<h3 id=\"no-implicit-any\"><a href=\"#no-implicit-any\" aria-label=\"no implicit any permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>no implicit any</h3>\n<p>As we have seen in the previous paragraph, honest and rigorous typing plays a fundamental role in ensuring our code behaves in a correct way.</p>\n<p>Honest typing is related to the option <em>noImplicitAny.</em></p>\n<p>Let’s consider the following snippet:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*q5cL6jF2ICpRbWkPKWhpFw.png\"></p>\n<p>The compiler has no idea what <code class=\"language-text\">x</code> and <code class=\"language-text\">y</code> are, and in some situations, it cannot figure it out on its own.</p>\n<blockquote>\n<p>Don’t be lazy, and <strong>type your code</strong>. </p>\n</blockquote>\n<p>There are situations where the compiler can figure it out without us explicitly adding a type, but in these cases, you need to consider whether adding the type increases or decreases the readability of your code.</p>\n<h2 id=\"clean-typescript-code\"><a href=\"#clean-typescript-code\" aria-label=\"clean typescript code permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Clean Typescript Code</h2>\n<h3 id=\"use-predictable-naming-conventions\"><a href=\"#use-predictable-naming-conventions\" aria-label=\"use predictable naming conventions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use predictable naming conventions</h3>\n<p>While linters and formatters make great allies in ensuring consistency across our codebases, there are some things that they still cannot help with: naming.</p>\n<p>Use predictable naming conventions your team can understand is fundamental in ensuring cleanliness, consistency, and clarity.</p>\n<p>Consider the following snippet, which is a scenario I encounter far too often:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*jAvSp7tyXSfZmhe_ZNzE-Q.png\"></p>\n<p>Obviously, <strong>I am not saying naming is easy</strong>. It’s not. </p>\n<p>But if you follow the most basic principles, you’re still ahead of many. Some things I’d feel suggesting are:</p>\n<ul>\n<li>if your method does not return anything, never prefix it with <em>get</em></li>\n<li>if your method returns something, never prefix it with <em>set</em></li>\n<li>ideally, don’t set and get in the same method…</li>\n<li>if your method is returning a boolean, consider prefixing it with <em>is</em> or <em>should (isThisThingVisible, shouldShowError, etc.)</em></li>\n<li>don’t name your variables with their type</li>\n<li>if you’re using a DSL from a different library or framework, stick with their conventions. For example, if you declare an observable with <em>RxJS</em>, make sure to suffix it with the dollar symbol ($)</li>\n</ul>\n<h3 id=\"use-aliases\"><a href=\"#use-aliases\" aria-label=\"use aliases permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use Aliases</h3>\n<p>Let’s be honest, no one likes seeing relative imports all over the place in our Typescript code. Using the paths aliases functionality in Typescript is a great way for making the imports nicer and shorter.</p>\n<p>How do aliases work?</p>\n<p>We define the <code class=\"language-text\">paths</code> configuration in our <code class=\"language-text\">tsconfig.json</code> . See the below example:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*_1zVUzTV4cmAwS_p8Ki9fw.png\"></p>\n<p>And then, I can access all my interfaces from <code class=\"language-text\">@core/interfaces</code> and (if you prefer even shorter access), all my enums from <code class=\"language-text\">enums.</code></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*_VwO_1qoi2i1aoU0mTfaVw.png\"></p>\n<h3 id=\"prefer-horizontal-reading\"><a href=\"#prefer-horizontal-reading\" aria-label=\"prefer horizontal reading permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prefer horizontal reading</h3>\n<p>This is someone not everyone may be on the same page with me, but that I greatly believe impacts the overall readability of your code.</p>\n<p>I love to keep my lines code between 80 (perfect) and 120 lines of code, depending on how my team feels about it. </p>\n<p>Let’s see the difference with one of my projects’ snippets. In the following image, the horizontal length is set to 120.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*HuZwRELp053NnZV_wWChEA.png\"></p>\n<p>In the image below, it is instead set to 80.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*bAg9o5s4LXTRnYLE0zUnjw.png\"></p>\n<p>Which one would you say it is easier to read and modify?</p>\n<blockquote>\n<p>💡<strong>Pro tip</strong>: Use Prettier to automatically wrap code for you</p>\n</blockquote>\n<h3 id=\"arrow-functions-are-cool-but-dont-overuse-them\"><a href=\"#arrow-functions-are-cool-but-dont-overuse-them\" aria-label=\"arrow functions are cool but dont overuse them permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Arrow functions are cool but don’t overuse them</h3>\n<p>I love arrow-functions. And I use them pretty often too. But I see them abused from time to time.</p>\n<p>Arrow functions are perfect for small expressions, but for longer and more complex ones, I’d much rather create a function block. </p>\n<p>Sometimes I see pretty convoluted expressions just for the sake of using an arrow function. </p>\n<p>Let’s see the difference between a long expression with an arrow function:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*SX0FtvRe_HRsUAWcMTBs6g.png\"></p>\n<p>And without an arrow function:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*EzXx8gQCcuhglxaQl2vAbQ.png\"></p>\n<p>It is totally possible to still use an arrow function and wrap the expression on the next line, but I feel it adds complexity when I happen to refactor the code, for example, if I need to add a variable in the expression. </p>\n<p>If you wrap it with an arrow function which is perfectly fine, make sure that the piece of code is unlikely to be changed anytime soon.</p>\n<h3 id=\"use-logical-spacing\"><a href=\"#use-logical-spacing\" aria-label=\"use logical spacing permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use logical spacing</h3>\n<p>Just like in Medium, white space, although not too much, can impact readability. </p>\n<p>The same happens with our code: we want to add spacing where it makes sense.</p>\n<p>Some code just feels like a wall of text without any logical separation. This is not an easy task, as everyone might just feel different about it, and a lot of it probably depends on everyone’s preferences.</p>\n<p>I’d say there are two main reasons for adding spaces:</p>\n<ul>\n<li>logical reasons, as it concerns the logic behind our code</li>\n<li>design reasons, as it concerns how easy the code is to read</li>\n</ul>\n<p>I won’t talk about the design reasons behind it as this just feels too subjective. Personally, I just try to follow these simple guidelines:</p>\n<ul>\n<li>group variables declarations logically</li>\n<li>keep one white space between your return statement and the function body</li>\n</ul>\n<p>If we are building two different objects with two separate groups of constants, chances are we want to add a space between them. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"..\"</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">const</span> surname <span class=\"token operator\">=</span> <span class=\"token string\">\"..\"</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">const</span> player <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> surname <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// logical break  </span>\n<span class=\"token keyword\">const</span> teamName <span class=\"token operator\">=</span> <span class=\"token string\">\"..\"</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">const</span> teamId <span class=\"token operator\">=</span> <span class=\"token string\">\"..\"</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">const</span> team <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> teamName<span class=\"token punctuation\">,</span> teamId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> player<span class=\"token punctuation\">,</span> team <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> </code></pre></div>\n<h3 id=\"break-complex-expressions-down\"><a href=\"#break-complex-expressions-down\" aria-label=\"break complex expressions down permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Break complex expressions down</h3>\n<p>It is pretty easy to end up with various long and complex expressions in our code. </p>\n<p>I‘d recommend to break down long expressions into groups of variables and separate methods. </p>\n<ul>\n<li>If a condition has more than 2 or 3 expressions, you should consider to break it down</li>\n<li>if a condition contains magic strings and numbers, you should consider extracting the expression into a method</li>\n</ul>\n<p>Let’s see a scenario where we have two possibly undefined objects that I am sure you see every day:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>price <span class=\"token operator\">&amp;&amp;</span> price<span class=\"token punctuation\">.</span>canExecute <span class=\"token operator\">&amp;&amp;</span> user <span class=\"token operator\">&amp;&amp;</span> user<span class=\"token punctuation\">.</span>hasPermissions <span class=\"token operator\">&amp;&amp;</span> service<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">return</span> priceService<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Maybe it’s my poor sight, but I can’t read that! Let’s refactor this:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">const</span> <span class=\"token constant\">STATUS_CODE_UP</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">const</span> isServiceDown <span class=\"token operator\">=</span> service<span class=\"token punctuation\">.</span>status <span class=\"token operator\">!==</span> <span class=\"token constant\">STATUS_CODE_UP</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isServiceDown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>price<span class=\"token punctuation\">.</span>canExecute <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>user<span class=\"token punctuation\">.</span>hasPermissions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> priceService<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ok, I can read this, but now just feels too long. Let’s refactor again:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">STATUS_CODE_UP</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ideally imported from another file</span>\n\n<span class=\"token keyword\">get</span> <span class=\"token function\">isServiceUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">return</span> service<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">STATUS</span>\\_CODE\\_UP<span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">get</span> <span class=\"token function\">canExecute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>price <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> price<span class=\"token punctuation\">.</span>canExecute <span class=\"token operator\">&amp;&amp;</span> user<span class=\"token punctuation\">.</span>hasPermissions<span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n   <span class=\"token keyword\">const</span> canExecute <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isServiceUp <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>canExecute<span class=\"token punctuation\">;</span>  \n   <span class=\"token keyword\">return</span> canExecute <span class=\"token operator\">&amp;&amp;</span> priceService<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>That feels better!</p>\n<h2 id=\"takeaways\"><a href=\"#takeaways\" aria-label=\"takeaways permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Takeaways</h2>\n<ul>\n<li>Lint and Format your code before it gets pushed</li>\n<li>Be rigorous with your code, enable <code class=\"language-text\">strict</code> mode</li>\n<li>Type well, and type often. Don’t use <em>any,</em> use generics and <em>unknown</em> instead</li>\n<li>Make sure your code is as readable as possible by following industry standards</li>\n</ul>","frontmatter":{"title":"Writing scalable Typescript","date":"04.05.2019","category":"typescript","featuredImage":"https://cdn-images-1.medium.com/max/1600/1*xxzCZ_x7oeKlq_NRTw6GeA.jpeg"},"timeToRead":10}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/writing-scalable-typescript","prev":null,"next":{"fields":{"slug":"/state-management-with-ngrx-introduction"},"frontmatter":{"title":"State Management with NGRX - Introduction","category":"angular"}}}}