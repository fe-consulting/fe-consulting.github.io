{"data":{"markdownRemark":{"html":"<h1 id=\"debugging-javascript-like-a-pro\"><a href=\"#debugging-javascript-like-a-pro\" aria-label=\"debugging javascript like a pro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Debugging Javascript Like a Pro</h1>\n<p>18.06.2019 — 9 Min Read — In <a href=\"/categories/javascript\">javascript</a></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/0*7UocdWX7aZYDkNtP\" alt=\"Debugging Javascript Like a Pro\"></p>\n<p>Are you one of those who are console logging your way to a solution when your code is not behaving the way you expect? If yes, read on.</p>\n<p>This article aims to explain to you the most useful tools and techniques provided by the Chrome Dev Tools to debug your Javascript code <strong>better and faster than ever before</strong>.</p>\n<p>By the end of this article, you’ll be able to debug your code better and faster than ever before.</p>\n<p>This is a summary of what we’re going to go through:</p>\n<ul>\n<li>setting breakpoints to debug code at a specific line</li>\n<li>navigating the call stack</li>\n<li>pausing/resuming the script execution</li>\n<li>setting watch expressions</li>\n<li>productivity tips and tricks for the Dev Tools</li>\n</ul>\n<h3 id=\"debugging-runtime-code\"><a href=\"#debugging-runtime-code\" aria-label=\"debugging runtime code permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#debugging-runtime-code\"></a>Debugging Runtime Code</h3>\n<p>If the cause you’re debugging your code is due to a bug or unexpected behavior, you’re likely interested in the “Sources” tab in the Dev Tools, which is the section we’re going to explore in depth through a set of various scenarios.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*o-K2FM8avaFY0MDonke7eQ.png\"></p>\n<h2 id=\"breakpoints\"><a href=\"#breakpoints\" aria-label=\"breakpoints permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#breakpoints\"></a>Breakpoints</h2>\n<p>If you are reading this article, you probably are used to debugging a particular line by logging to the console a certain value. But I want you to introduce to a more powerful way that goes way deeper in the code than simply logging: <strong>breakpoints</strong>.</p>\n<p>Setting breakpoints is normally the first step of the debugging process. The built-in development tools in most browsers allow you to stop the execution of your code at a particular line of code and at a particular statement on every line of code running on the page being debugged, but for the purpose of this article, we will be specifically using the Chrome Dev Tools.</p>\n<h3 id=\"what-are-breakpoints-for\"><a href=\"#what-are-breakpoints-for\" aria-label=\"what are breakpoints for permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#what-are-breakpoints-for\"></a>What are Breakpoints for?</h3>\n<p>Normally, you may want to stop the execution of the code so that you can interactively inspect the particular context that we’re interested in.</p>\n<p>Once the code has stopped at the breakpoint, we can start the debugging process by getting access to the scope, navigating the call stack, and even change the code at runtime.</p>\n<h3 id=\"how-to-set-breakpoints\"><a href=\"#how-to-set-breakpoints\" aria-label=\"how to set breakpoints permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#how-to-set-breakpoints\"></a>How to set Breakpoints?</h3>\n<p>In order to explain how to set breakpoints, we will debug an Angular codebase of one of the side projects I use for education purposes, although the technology used doesn’t really matter.</p>\n<ul>\n<li>The first thing you may want to do is to open the dev tools and go to the “Sources” tab</li>\n<li>Then, we need to open the file we want to debug<br>\n<strong>Tip:</strong> on Mac, ⌘ + O will open the files selector where you can find the file needed on the fly. On Windows, use CTRL+O</li>\n<li>Once the file has been opened, we can finally set up a breakpoint by clicking on the line of code we want to stop on.</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/2400/1*HZnwrJpcjJQuBQuamXriIg.gif\"></p>\n<p>As you can see in the image above, we can go deeper than setting a breakpoint on a line of code, and we can also set it to the statements on the same line of code.</p>\n<p>We set 3 breakpoints:</p>\n<ul>\n<li>the first on the line of code that stops the execution at definition time</li>\n<li>the second will stop before the <code class=\"language-text\">priceReceived</code> function executes</li>\n<li>the third one will stop right after <code class=\"language-text\">priceReceived</code> gets called, so we can also inspect the return value of the arrow function</li>\n</ul>\n<p>When the arrow function gets called, the execution stops and the right-hand panel <code class=\"language-text\">Scope</code> gets populated with information regarding the current context, and gives us access to all the scope so we can inspect the values we’re interested in.</p>\n<p>In this case, you can see how we can see the value of the variable <code class=\"language-text\">price</code>.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2400/1*j56_-6hTF4z6pXWVC9TwnQ.png\"></p>\n<p>In the image below, our third breakpoint gets hit once the function <code class=\"language-text\">priceReceived</code> has been executed.</p>\n<p>As you can see in the right-hand panel, <code class=\"language-text\">Return value</code> will show us what the anonymous function returns</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2400/1*skx3u3zsEm3-VF338jG2Xw.png\"></p>\n<h3 id=\"temporarily-pausing-breakpoints\"><a href=\"#temporarily-pausing-breakpoints\" aria-label=\"temporarily pausing breakpoints permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#temporarily-pausing-breakpoints\"></a>Temporarily pausing Breakpoints</h3>\n<p><strong>Scenario</strong>: you set a bunch of breakpoints all over the codebase.</p>\n<p>As you may have experienced, it’s very common to refresh the page multiple times while debugging.</p>\n<p>The code you’re currently debugging may have various breakpoints and sometimes, these can even be called hundreds of times! Yeah, it can be frustrating and time-consuming.</p>\n<p>In such cases, I recommend to temporarily pause the execution of all breakpoints, and you can do this by toggling the icon you can see in the image below:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2400/1*cnRKMhzmOptgjm0v6ey8-Q.gif\"></p>\n<h3 id=\"stopping-execution-on-errors\"><a href=\"#stopping-execution-on-errors\" aria-label=\"stopping execution on errors permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#stopping-execution-on-errors\"></a>Stopping Execution on Errors</h3>\n<p><strong>Scenario</strong>: you get an unexpected error, but you don’t want to set a breakpoint as you’re unsure when exactly the error is going to be thrown.</p>\n<p>You can stop the execution as soon as an error is thrown, so you can inspect the scope and understand what went wrong.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2400/1*6B4Uvz3g4sZpqlnUWDEBpw.gif\"></p>\n<h3 id=\"conditional-breakpoints\"><a href=\"#conditional-breakpoints\" aria-label=\"conditional breakpoints permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#conditional-breakpoints\"></a>Conditional Breakpoints</h3>\n<p>Conditional Breakpoints, as the name suggests, allow us to only trigger certain breakpoints if a condition is truthy.</p>\n<p>For instance, in the example shown above, the user can input in the text area non-numerical values. JS is very forgiving and will just display <code class=\"language-text\">NaN</code> instead of throwing an error.</p>\n<p><strong>Scenario</strong>: you have more complex code than the one above, and can’t figure out when the result is <code class=\"language-text\">NaN</code> .</p>\n<p>Of course, you could set a breakpoint, but it’s not easy to reproduce the error and you end up spending half an hour stepping through the execution of your code. This is a scenario where you could use a conditional breakpoint and break the execution only when the value inspected is <code class=\"language-text\">NaN</code> .</p>\n<p>See the image below:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2400/1*e-pc-wpZexL8tknq9wunLg.gif\"></p>\n<ul>\n<li>We right-click on the line of code we want to add the breakpoint to</li>\n<li>Click on “Add conditional breakpoint…”</li>\n<li>Add a valid JS expression. Of course, you have access to the scope when the expression gets called, which means we can reference the params <code class=\"language-text\">x</code> and <code class=\"language-text\">y</code></li>\n<li>When the expression is truthy, the breakpoint will be triggered!</li>\n</ul>\n<h3 id=\"stepping-through-your-code\"><a href=\"#stepping-through-your-code\" aria-label=\"stepping through your code permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#stepping-through-your-code\"></a>Stepping through your code</h3>\n<p>In order to fully take advantage of the Dev Tools, it’s worth spending a little bit of time and learn how the Dev Tools helps us to quickly step through the code without setting breakpoints at each line.</p>\n<ul>\n<li><strong>Step</strong> The simplest navigator in the Dev Tools, allows you to step through your code line by line, based on execution order.<br>\nIt’s important to notice that <strong>Step</strong> has been recently introduced due to a change to <strong>Step Into next function call</strong>. When debugging asynchronous code, <em>Step</em> will move to the next line chronologically</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/2400/1*lnLSkTfTPgoZnH09TzPOJQ.gif\"></p>\n<ul>\n<li><strong>Step over next function call</strong><br>\nThis navigator allows you to step line-by-line, yet without stepping into function calls. That is, function calls will be stepped over and unless a breakpoint has been set within them, the debugger will not stop within statements in that function</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/2400/1*o8BEBvXjLJ2I5pATcWUWkw.gif\"></p>\n<p>If you pay attention to the image above, multiplyBy and renderToDOM were executed but the debugger did not step into them like the previous navigator did (<strong>Step</strong>).</p>\n<ul>\n<li><strong>Step into next function call</strong><br>\nSince Chrome 68, this navigator has changed its behavior. This is similar to <em>Step</em> which we have seen previously. The difference is that when stepping into asynchronous code, it will stop in the async code and not on the code that, chronologically, will run.</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/2400/1*hQVAtoo06qMSQDlUCd-1DQ.gif\"></p>\n<p>Watch the image above: chronologically, line 32 should have been run, but it didn’t. The debugger waited and moved to line 29 after 2 seconds</p>\n<ul>\n<li>**Step out of function call<br>\n**Say you’re not interested in the execution of a certain function, this navigator allows you to step out of a function and will stop at the next line following the function call</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/2400/1*bLRfIxnKbcz6-tikZi06Vw.gif\"></p>\n<p>What happened in the image above?</p>\n<ul>\n<li>We stopped at the breakpoint at line 36</li>\n<li>We stepped out of the function <code class=\"language-text\">renderToDOM</code></li>\n<li>The debugger moved directly to line 29 and skipped the rest of the function <code class=\"language-text\">renderToDOM</code></li>\n</ul>\n<h3 id=\"global-variables-and-eager-evaluation\"><a href=\"#global-variables-and-eager-evaluation\" aria-label=\"global variables and eager evaluation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#global-variables-and-eager-evaluation\"></a>Global Variables and Eager Evaluation</h3>\n<p>Sometimes it can be useful to store in the global scope some values such as a component’s class, huge arrays or complex objects.</p>\n<p>Adding these values to the global scope while debugging can be a huge time-saver when you want to, for instance, call a method on that component with different parameters.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2400/1*datD6XsMhv__QA0eF2HjeA.gif\"></p>\n<p>In the image above, I save the array <code class=\"language-text\">[previous, current]</code> as a global variable. The Dev Tools automatically assign a name to the variable, which is <code class=\"language-text\">temp{n}</code> with <code class=\"language-text\">n</code> based on the number of previously saved variables.</p>\n<p>As you can see in the image above, the variable gets named <code class=\"language-text\">temp2</code> and I can use it in the console as it is now defined globally!</p>\n<p>Thanks to <strong>Eager Evaluation,</strong> a feature released in Chrome 68, the Dev Tools allows the evaluation of statements in the console as you write them and also displays the signature of the method.</p>\n<p>If you pay attention to the image above, when I map the saved variable to an array of strings, the result is immediately visible without me having to press Enter.</p>\n<h2 id=\"navigating-the-call-stack\"><a href=\"#navigating-the-call-stack\" aria-label=\"navigating the call stack permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#navigating-the-call-stack\"></a>Navigating the Call Stack</h2>\n<p>Navigating the call stack is one of the most useful tools that the Dev Tools provide: not only can you jump back and forth in the call stack, but you can also inspect the scope at each step.</p>\n<p>Assume we have a dead simple page and a script that takes in input a number and will render on the page the number multiplied by 10. We will call two functions: one to multiply, and one to render the result to the DOM.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2400/1*SfNyMZRGB83s0lTWgEsk0A.gif\"></p>\n<p>As you can see in the image above, we are able to navigate through the call stack just by clicking on the name of the function in the pane “Call Stack”.</p>\n<p>As you may have also noticed, every time we jump from a call to another, the scope is retained and we can analyze it at each step!</p>\n<h3 id=\"blackbox-scripts-to-flatten-the-stack\"><a href=\"#blackbox-scripts-to-flatten-the-stack\" aria-label=\"blackbox scripts to flatten the stack permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#blackbox-scripts-to-flatten-the-stack\"></a>Blackbox scripts to flatten the stack</h3>\n<p>Blackboxing scripts will help declutter the call stack by excluding from the stack certain scripts or scripts that match a certain pattern.</p>\n<p>For instance, if I am solely interested in debugging the userland code, which is probably 99% of the times, I will add a pattern to black box all the scripts under the folder <code class=\"language-text\">node_modules</code> .</p>\n<p>In order to black box a script, you have two ways:</p>\n<ul>\n<li>right-click on a script in your Sources panel and click on “Blackbox Script”</li>\n<li>go to the Chrome Settings page, then go to <em>Blackboxing</em> and click on <em>Add Pattern…</em> and enter the pattern you want to black box, which is useful when you want to exclude a large number of scripts</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*WgmPn7FqR0xFzdB9kPg1_Q.png\"></p>\n<h2 id=\"watch-expressions\"><a href=\"#watch-expressions\" aria-label=\"watch expressions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#watch-expressions\"></a>Watch Expressions</h2>\n<p>Watching expressions enable you to define some Javascript expressions that the Dev Tools will keep track of and execute, and will display the current result. This is a particularly interesting tool as you can virtually write anything you want, as long as it is a valid Javascript expression.</p>\n<p>For example, you can write an expression and expect the result of this expression to always be <code class=\"language-text\">true</code> so that when the expression will be <code class=\"language-text\">false</code> , you know something is wrong in the current state.</p>\n<p>There’s a catch:</p>\n<ul>\n<li>while we’re debugging using breakpoints, the watch expressions will be evaluated live and won’t need to be refreshed</li>\n<li>if the code is executing, you will need to manually click the refresh button</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*vmDDbDAGSlmXnCP4zGg7GA.png\"></p>\n<h2 id=\"final-words\"><a href=\"#final-words\" aria-label=\"final words permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#final-words\"></a>Final Words</h2>\n<p>The Dev Tools are an incredible resource for debugging complex code. Sometimes you may dig deeper than console logging, and the tools above will allow for an in-depth debugging experience. These tools require a little practice before you’ll be fully comfortable using them, so don’t be put down if you’re feeling unfamiliar with all the options available.</p>\n<h3 id=\"resources\"><a href=\"#resources\" aria-label=\"resources permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#resources\"></a>Resources</h3>\n<p>Here are some resources to fully understand all the available options the Dev Tools provide:</p>\n<ul>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/javascript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Get Started with Debugging JavaScript in Chrome DevTools</a></li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/console/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Console Overview</a></li>\n</ul>\n<hr>\n<p><em>If you enjoyed this article, follow me on</em> <a href=\"https://medium.com/@.gc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>Medium</em></a> <em>or</em> <a href=\"https://twitter.com/home\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>Twitter</em></a> <em>for more articles about Angular, RxJS, Typescript and more!</em></p>","frontmatter":{"title":"","date":null,"category":null,"featuredImage":null,"canonical":null},"timeToRead":10}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/","prev":null,"next":{"fields":{"slug":"/building-scalable-multi-platform-projects-with-angular-and-nx"},"frontmatter":{"title":"Building Scalable Multi-Platform Projects with Angular and Nx","category":"angular"}}}}