{"data":{"markdownRemark":{"html":"<h4 id=\"in-this-tutorial-were-going-to-build-a-very-simple-timer-application-with-only-a-few-lines-of-code-using-rxjs\"><a href=\"#in-this-tutorial-were-going-to-build-a-very-simple-timer-application-with-only-a-few-lines-of-code-using-rxjs\" aria-label=\"in this tutorial were going to build a very simple timer application with only a few lines of code using rxjs permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>In this tutorial, we’re going to build a very simple timer application with only a few lines of code using RxJS.</h4>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*UqfNSA5wgWcEXphLsBXuUg.gif\"></p>\n<h3 id=\"preview\"><a href=\"#preview\" aria-label=\"preview permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Preview</h3>\n<p>Before we get started, you can view the result using the awesome Stackblitz. You can see a preview of the final result at <a href=\"https://medium.com/r/?url=https%3A%2F%2Frxjs-rajp6s.stackblitz.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this link</a>.</p>\n<p>The timer starts automatically when you land on the page, you can click on the time to stop it, and click again to restart the timer. </p>\n<p>When the time ends, the user will be prompted to take a break! It’s a very simple example, so the timer won’t restart.</p>\n<h3 id=\"constants\"><a href=\"#constants\" aria-label=\"constants permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Constants</h3>\n<p>Let’s first define some of the constants we’re going to use:</p>\n<ul>\n<li>We define <code class=\"language-text\">K</code> as we’re going to use this a lot, as we will be dealing with milliseconds, so we assign <code class=\"language-text\">1000</code> as value</li>\n<li>The interval is the amount of time that needs to elapse in order to update the timer. If we set it to <code class=\"language-text\">5000</code>, the timer would be updated every 5 seconds</li>\n<li>We set the minutes we want our timer to be long and its time in milliseconds</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">K</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">const</span> <span class=\"token constant\">INTERVAL</span> <span class=\"token operator\">=</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">const</span> <span class=\"token constant\">MINUTES</span> <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">const</span> <span class=\"token constant\">TIME</span> <span class=\"token operator\">=</span> <span class=\"token constant\">MINUTES</span> <span class=\"token operator\">*</span> <span class=\"token constant\">K</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"state-variables\"><a href=\"#state-variables\" aria-label=\"state variables permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State variables</h3>\n<p>In order to keep the time’s state when pausing/resuming the timer, we define two variables:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> current<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">let</span> time <span class=\"token operator\">=</span> <span class=\"token constant\">TIME</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">current</code> will be continually updated every second</li>\n<li><code class=\"language-text\">time</code> will be updated when the timer stops</li>\n</ul>\n<h3 id=\"helper-functions\"><a href=\"#helper-functions\" aria-label=\"helper functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Helper functions</h3>\n<p>We define some helper functions used by our streams. We want to:</p>\n<ul>\n<li>convert remaining time to milliseconds and seconds</li>\n<li>have functions to display remaining minutes and seconds</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toMinutes</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ms<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>   \n    Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>ms <span class=\"token operator\">/</span> <span class=\"token constant\">K</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toSeconds</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ms<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>   \n    Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>ms <span class=\"token operator\">/</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toSecondsString</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ms<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">const</span> seconds <span class=\"token operator\">=</span> <span class=\"token function\">toSeconds</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">return</span> seconds <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token string\">`0</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>seconds<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token punctuation\">:</span> seconds<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toMs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">t<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> t <span class=\"token operator\">*</span> <span class=\"token constant\">INTERVAL</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">currentInterval</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> time <span class=\"token operator\">/</span> <span class=\"token constant\">INTERVAL</span><span class=\"token punctuation\">;</span>  \n  \n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toRemainingSeconds</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">t<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">currentInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> t<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"defining-the-rx-streams\"><a href=\"#defining-the-rx-streams\" aria-label=\"defining the rx streams permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Defining the Rx streams</h3>\n<p>First, we define the <code class=\"language-text\">timer$</code> stream: </p>\n<ul>\n<li>we use the observable creator <code class=\"language-text\">timer</code>, that emits every <code class=\"language-text\">INTERVAL</code> times, which basically means it will emit every second</li>\n</ul>\n<p>The stream will convert the milliseconds emitted from <code class=\"language-text\">timer</code> to the remaining seconds.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> toggle$ <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BehaviorSubject</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">const</span> remainingSeconds$ <span class=\"token operator\">=</span> toggle$<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>  \n    <span class=\"token function\">switchMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">running<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">return</span> running <span class=\"token operator\">?</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">INTERVAL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">NEVER</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>toRemainingSeconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token function\">takeWhile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span> <span class=\"token operator\">=></span> t <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Let’s explain detail what this does:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">**toggle$** -&gt; true...false...true\n\n-----\n\n**switchMap** to:\n\n **if toggle is true -&gt; timer(0, INTERVAL = 1000)** -&gt; 0...1000...2000   \n **if toggle is false ? -&gt;** NEVER = do not continue\n\n----\n\n**map(toRemainingSeconds)** -&gt; ms elapsed mapped to remaining seconds (ex. 1500)\n\n----\n\n**takeWhile(remainingSeconds)** -&gt; complete once **remainingSeconds$&#39;s** value  is no more &gt;= 0</code></pre></div>\n<p>Let’s consider the operators used:</p>\n<ul>\n<li>the mapper <code class=\"language-text\">toSeconds</code> will convert the milliseconds returned by the observable to the number of seconds that are remaining</li>\n<li>by using the operator <code class=\"language-text\">takeWhile</code>we’re basically telling the <code class=\"language-text\">remainingSeconds$</code> observable to keep going until the seconds remaining are greater or equal than 0</li>\n<li>After that, <code class=\"language-text\">remainingSeconds$</code> will emit its completion callback that we can use to replace the timer with some other content</li>\n</ul>\n<p>Before creating the relative minutes and seconds we will be displaying, we want to be able to stop and resume and timer. </p>\n<p>If <code class=\"language-text\">toggle$</code> is emitted with <code class=\"language-text\">true</code> as value, the timer keeps running, while if it gets emitted with <code class=\"language-text\">false</code> it will stop, as instead of mapping to <code class=\"language-text\">remainingSeconds$</code> it will emit the observable <code class=\"language-text\">NEVER</code> .</p>\n<h3 id=\"pausing-and-resuming-the-timer\"><a href=\"#pausing-and-resuming-the-timer\" aria-label=\"pausing and resuming the timer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pausing and resuming the timer</h3>\n<p>By using <code class=\"language-text\">fromEvent</code> , we can listen to click events and update the behavior subject by toggling its current value.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> toggleElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.timer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>toggleElement<span class=\"token punctuation\">,</span> ‘click’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>  \n    toggle$<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>toggle$<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>But <code class=\"language-text\">toggle$</code> also does something else: </p>\n<ul>\n<li>every time the timer gets stopped, we want to update the time variable with the current time, so that the next time the timer restarts, it will restart from the current time.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">toggle$<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>  \n    <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">toggled<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>toggled<span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>  \n    time <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, we can define the milliseconds observable we’re going to use to display minutes and seconds: </p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> ms$ <span class=\"token operator\">=</span> time$<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>  \n    <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>toMs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span> <span class=\"token operator\">=></span> current <span class=\"token operator\">=</span> t<span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Every time <code class=\"language-text\">ms$</code> emits, we use the <code class=\"language-text\">tap</code> operator to update the stateful variable <code class=\"language-text\">current</code>.</p>\n<p>Next, we’re going to define minutes and seconds by reusing the helper methods we defined earlier in the article.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> minutes$ <span class=\"token operator\">=</span> ms$<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>  \n    <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>toMinutesDisplay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span> <span class=\"token operator\">=></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token function\">startWith</span><span class=\"token punctuation\">(</span><span class=\"token function\">toMinutesDisplay</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> seconds$ <span class=\"token operator\">=</span> ms$<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>  \n    <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>toSecondsDisplayString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token function\">startWith</span><span class=\"token punctuation\">(</span><span class=\"token function\">toSecondsDisplayString</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And that’s it! Our streams are ready and can now update the DOM.</p>\n<h3 id=\"updating-the-dom\"><a href=\"#updating-the-dom\" aria-label=\"updating the dom permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Updating the DOM</h3>\n<p>We define a simple function called <code class=\"language-text\">updateDom</code> that takes an observable as the first argument and an HTML element as the second one. Every time the source emits, it will update the <code class=\"language-text\">innerHTML</code> of the node.</p>\n<p>HTML:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>timer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>minutes<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>seconds<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// DOM nodes</span>\n<span class=\"token keyword\">const</span> minutesElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.minutes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">const</span> secondsElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.seconds'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">updateDom</span><span class=\"token punctuation\">(</span>minutes$<span class=\"token punctuation\">,</span> minutesElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token function\">updateDom</span><span class=\"token punctuation\">(</span>seconds$<span class=\"token punctuation\">,</span> secondsElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">updateDom</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">source$<span class=\"token punctuation\">:</span> Observable<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">:</span> Element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    source$<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> element<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Lastly, we want to display a message when the timer stops:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">timer$<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>  \n    <span class=\"token function-variable function\">complete</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">updateDom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Take a break!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> toggleElement<span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*viwakc1HIU6SKXtrXgTLPw.gif\"></p>\n<p>You can find the complete code snippet on <a href=\"https://medium.com/r/?url=https%3A%2F%2Fstackblitz.com%2Fedit%2Frxjs-rajp6s%3Ffile%3Dindex.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stackblitz</a>.</p>\n<p>Hope you enjoyed the article and leave a message if you agree, disagree, or if you would do anything differently!</p>\n<hr>\n<p><em>If you enjoyed this article, follow me on</em> <a href=\"https://medium.com/@.gc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>Medium</em></a> <em>or</em> <a href=\"https://medium.com/r/?url=https%3A%2F%2Ftwitter.com%2Fhome\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>Twitter</em></a> <em>for more articles about Angular, RxJS, Typescript and more!</em></p>","frontmatter":{"title":"A simple Countdown with RxJS","date":"06.05.2019","category":"rxjs","featuredImage":"https://cdn-images-1.medium.com/max/1600/1*UqfNSA5wgWcEXphLsBXuUg.gif"},"timeToRead":5}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/a-simple-countdown-with-rx-js","prev":null,"next":{"fields":{"slug":"/building-side-effects-in-ngrx"},"frontmatter":{"title":"Building Side Effects in NGRX","category":"angular"}}}}