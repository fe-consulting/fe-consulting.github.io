{"data":{"markdownRemark":{"html":"<p>This is the fourth and last article of a series that aims to explain in detail a step-by-step approach to building an Angular application with NGRX.</p>\n<ul>\n<li>In <a href=\"https://medium.com/r/?url=https%3A%2F%2Fitnext.io%2Fstate-management-with-ngrx-introduction-1aae0803e988\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the first article of this series</a>, I wrote a small overview of all the concepts surrounding the NGRX platform.</li>\n<li>In <a href=\"https://medium.com/r/?url=https%3A%2F%2Fitnext.io%2Farchitecting-the-store-in-ngrx-e4955641d746\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the second article of this series</a>, I started writing the store of the application and the state’s entities.</li>\n<li>In <a href=\"https://medium.com/r/?url=https%3A%2F%2Fitnext.io%2Fbuilding-side-effects-in-ngrx-deb0d856096d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the third article of this series</a>, we built the effects that are responsible for fetching assets and prices from Coincap’s API</li>\n</ul>\n<h3 id=\"summary\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h3>\n<p>Just to summarise what I introduced in the previous articles, we have an application that aims to display a dashboard with cryptocurrencies prices.</p>\n<p>The application’s logic is built using three service modules, each module manages a different feature of our store.</p>\n<p>These are:</p>\n<ul>\n<li><strong>dashboard</strong>, that manages the logic of the dashboard and its tiles</li>\n<li><strong>assets,</strong> a list of assets fetched from <a href=\"https://medium.com/r/?url=https%3A%2F%2Fcoincap.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Coincap’s</a> API</li>\n<li><strong>prices,</strong> a stream of prices from Coincap’s WebSocket API</li>\n</ul>\n<p><strong>What the app will look like:</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*R3-0VFvXB2rq-rAtWyNwxA.gif\"></p>\n<p>Type caption for image (optional)  </p>\n<h3 id=\"in-this-article-we-will-be-learning\"><a href=\"#in-this-article-we-will-be-learning\" aria-label=\"in this article we will be learning permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>In this article we will be learning:</h3>\n<ul>\n<li>what a Facade service is and how we apply it to NGRX</li>\n<li>creating lean UI components that are connected with the <em>Store</em> using <strong>Facades</strong></li>\n</ul>\n<h2 id=\"whats-a-facade\"><a href=\"#whats-a-facade\" aria-label=\"whats a facade permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What’s a Facade?</h2>\n<p>A <em>Facade</em>, in terms of software engineering, is implemented as an object that offers a unified and simpler interface behind a more complex system. </p>\n<p>In other terms, it abstracts the complex system (<em>NGRX</em>) behind a single <em>Service</em>.</p>\n<p>How is that useful for us?</p>\n<ul>\n<li>we abstract UI components from the State Management used</li>\n<li>we simplify the interfaces using clear, small methods</li>\n<li>we minimize the number of dependencies used by a component</li>\n<li>we provide a central service to fetch data and dispatch commands</li>\n</ul>\n<h3 id=\"advantages\"><a href=\"#advantages\" aria-label=\"advantages permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Advantages</h3>\n<ul>\n<li><strong>Abstraction</strong><br>\nLet’s say we start this project using <em>NGRX</em> and one day we decide to switch to <em>NGXS</em>, <em>Akita</em>, or some other State Management tooling. By using facades, we never have to refactor components and services that rely on the library used.</li>\n<li>**Simplicity<br>\n**A facade will hide away the technicalities and implementation of the library we use from the consumers, which result in components being lean and simple.</li>\n<li>**Reusability<br>\n**A facade will help with reusing some of the code used to dispatch and create actions, or select fragments from the store, as you never need to write that twice.</li>\n</ul>\n<p>Of course, there are also some disadvantages to using Facade Services with NGRX, and I’d recommend you to the article <a href=\"https://medium.com/r/?url=https%3A%2F%2Fauth0.com%2Fblog%2Fngrx-facades-pros-and-cons%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NgRx Facades: Pros and Cons</a> for a great explanation.</p>\n<h2 id=\"facade-services-in-practice\"><a href=\"#facade-services-in-practice\" aria-label=\"facade services in practice permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Facade Services in Practice</h2>\n<p>But now, let’s get back to our application and apply what we learned about Facades.</p>\n<p>We will be implementing a Facade Service for each of our Store Modules we built in the previous articles. </p>\n<p>The Facade Service will be the interface between the modules that import the Store Modules and their internal smart components.</p>\n<p>The only Feature Module we need to build is going to be the Dashboard Feature Module that will take care of defining the UI containers and components that will be connected via our Facade Services exported from the Store Modules. </p>\n<p>We will build 4 components:</p>\n<ul>\n<li><strong>Dashboard component,</strong> that will query the store for the assets that have been subscribed. Initially, no asset is selected.</li>\n<li><strong>Tile component,</strong> that will  contain an asset selector if no asset for that tile has been subscribed, otherwise, it will display an asset pricer if instead the user subscribed to an asset</li>\n<li><strong>Asset selector,</strong> that the user can use to select an asset (ex. Bitcoin)</li>\n<li><strong>Asset pricer,</strong> that will display the prices of the asset selected</li>\n</ul>\n<p>A few things before we start:</p>\n<ul>\n<li>These components will be powered by <a href=\"https://medium.com/r/?url=https%3A%2F%2Fmaterial.angular.io%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Angular Material</a></li>\n<li>All imports are omitted for brevity, but the link to the source code will be provided</li>\n</ul>\n<h3 id=\"dashboard-component\"><a href=\"#dashboard-component\" aria-label=\"dashboard component permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dashboard Component</h3>\n<p>The Dashboard component will be responsible for 2 things:</p>\n<ul>\n<li>loading the assets when initialized, using the <em>Assets Facade</em></li>\n<li>querying and displaying all the tiles from the store, using the <em>Dashboard Facade</em></li>\n</ul>\n<p>Before we build the component, let’s take a look at the Facades. </p>\n<p>We first create the <strong>Dashboard Facade</strong>:</p>\n<p>Type caption for embed (optional)  </p>\n<p>Let’s break it down:</p>\n<ul>\n<li><strong>tiles$</strong> is an Observable that selects all the tiles from the store</li>\n<li>we have two methods, <strong>addTile,</strong> and <strong>updateTileAsset,</strong> that will dispatch actions to the store for adding and updating a tile</li>\n</ul>\n<p>We first create the <strong>Assets Facade</strong>:</p>\n<p>Type caption for embed (optional)  </p>\n<p>This one is very simple, we have:</p>\n<ul>\n<li>the list of assets selected from the store</li>\n<li>an action dispatched to the effects to fetch the assets using the API</li>\n</ul>\n<p>And now on to the UI side of things. We define the Dashboard Component’s controller, which will use the two Facades we defined above:</p>\n<p>Type caption for embed (optional)  </p>\n<ul>\n<li>The template of the component will display the tiles using a Grid List component from Angular Material</li>\n<li>Every tile’s state is passed to the component <strong>cf-tile</strong></li>\n<li>A button (<code class=\"language-text\">mat-icon-button</code>) is displayed in its own tile and is used to add a new empty tile</li>\n</ul>\n<p>Type caption for embed (optional)  </p>\n<h3 id=\"tile-component\"><a href=\"#tile-component\" aria-label=\"tile component permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tile Component</h3>\n<p>The tile component is responsible for displaying either the assets dropdown or the asset price if any has been subscribed. This component is going to need two facades:</p>\n<ul>\n<li>the dashboard facade, that we defined earlier</li>\n<li>the prices facade, in order to create a subscription once an asset has been selected</li>\n</ul>\n<p>Let’s move on and define the Pricer Facade:</p>\n<p>Type caption for embed (optional)  </p>\n<p>Now, let’s break what we’ve defined down:</p>\n<ul>\n<li>we define two private methods for dispatching actions: the method <code class=\"language-text\">addInitalPrice</code> will create the initial price for the asset subscribed, which is initially empty; the other method <code class=\"language-text\">createSubscription</code> will start the WebSocket subscription, as we’ve seen <a href=\"https://medium.com/r/?url=https%3A%2F%2Fitnext.io%2Fbuilding-side-effects-in-ngrx-deb0d856096d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">in the previous article</a> when we defined the effects.</li>\n</ul>\n<p>The Tile component is very simple: </p>\n<p>Type caption for embed (optional)  </p>\n<p>In the template, we simply use an <code class=\"language-text\">ngSwitch</code> to either display the price if the <code class=\"language-text\">assetId</code> is defined, or the selector if it is undefined.</p>\n<p>Type caption for embed (optional)  </p>\n<p>The component <code class=\"language-text\">cf-asset-selector</code> will dispatch an output when an asset is selected by the user, and the output will call the method <code class=\"language-text\">updateTile</code> , which will update the tile by assigning it an <code class=\"language-text\">assetId</code>, and then will call the method to create the price subscription and start streaming the asset prices.</p>\n<h3 id=\"asset-selector-component\"><a href=\"#asset-selector-component\" aria-label=\"asset selector component permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Asset Selector Component</h3>\n<p>The Asset Selector component is simply a dropdown with the available assets that will dispatch an output when an asset has been selected. The assets are queried from the Assets Facade. Simple, right?</p>\n<p>Type caption for embed (optional)  </p>\n<p>The template is powered by the <code class=\"language-text\">mat-select</code> component from Angular Material, although a simple select would have done the job. We simply create a select and iterate the assets to create the available option. </p>\n<p>When an option gets selected, the output <code class=\"language-text\">assetSelected</code> will emit a new event.</p>\n<p>Type caption for embed (optional)  </p>\n<h3 id=\"asset-pricer-component\"><a href=\"#asset-pricer-component\" aria-label=\"asset pricer component permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Asset Pricer Component</h3>\n<p>The Asset Pricer component is responsible for displaying the prices, and also show when a price went up or down for 2 seconds. </p>\n<p>As you may have noticed, this component is the cool one. We receive an asset ID as input, and we create a subscription to the store for streaming the prices to our component.</p>\n<blockquote>\n<p>Technically this is a smart component and should have passed the data down to dumb components, but for brevity, I thought it’d be better to show all the code in one single component</p>\n</blockquote>\n<p>Type caption for embed (optional)  </p>\n<p>This component is a little bit more complex so we may want to break this down. Our goal is to:</p>\n<ul>\n<li> display a red price when a price goes down</li>\n<li>display a green price when the price goes up</li>\n<li>return the price to a normal state (white) after 2 seconds</li>\n</ul>\n<p>This is what happens:</p>\n<ul>\n<li>we get a price via the facade method <code class=\"language-text\">getPriceForAsset</code> and we simply map to its formatted version</li>\n<li>we store in memory the latest price received with <code class=\"language-text\">shareReplay(1)</code> so we can reuse the subscription to calculate the trend</li>\n<li>every time we get a new price, we create a timer that maps the price state to <code class=\"language-text\">Stale</code> </li>\n<li>we use the operator <code class=\"language-text\">pairwise</code> that gives us the current and the previous value for the current subscription, and thanks to that we can figure out if the price went up or down</li>\n<li>The trend is an observable emitted when a price changes, and is obtained by merging the timer and the trend result. Every time we have a price change, it first becomes red or green, and then goes back to its normal state after 2 seconds when the observable <code class=\"language-text\">timer$</code> emits a value</li>\n</ul>\n<p>Type caption for embed (optional)  </p>\n<p>The template is very simply the price obtained by the store, replaced by a spinner while the price is undefined, meaning the subscription is still ongoing. </p>\n<p>The classes <code class=\"language-text\">trend-up</code> and <code class=\"language-text\">trend-down</code> are added to style the price’s color.</p>\n<h2 id=\"final-words\"><a href=\"#final-words\" aria-label=\"final words permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Final words</h2>\n<p>NGRX is a very powerful tool. Certainly, sometimes it may require some in-depth knowledge of RxJS, but with a little bit of patience, it can really revolutionize the way you’ve been writing software. </p>\n<p>I hope this tutorial has helped you understand how to set up a basic (yet scalable) folder structure and the basics to start writing powerful reactive applications with Angular and NGRX.</p>\n<p>For any clarifications or if there are things you’d do differently, feel free to send me an email or comment below.</p>\n<h3 id=\"source-code\"><a href=\"#source-code\" aria-label=\"source code permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Source Code</h3>\n<p>The full source code of the project can be seen at <a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2FGbuomprisco%2Fcryptofolio\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/Gbuomprisco/cryptofolio</a></p>\n<hr>\n<p>Hope you enjoyed the article and leave a message if you agree, disagree, or if you would do anything differently!</p>\n<hr>\n<p><em>If you enjoyed this article, follow me on</em> <a href=\"https://medium.com/@.gc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>Medium</em></a> <em>or</em> <a href=\"https://medium.com/r/?url=https%3A%2F%2Ftwitter.com%2Fhome\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>Twitter</em></a> <em>for more articles about Angular, RxJS, Typescript and more!</em></p>","frontmatter":{"title":"Abstracting State with NGRX Facades","date":"27.05.2019","category":"angular","featuredImage":"https://cdn-images-1.medium.com/max/1600/1*gpPfP-mWGZ7Ad6KRDAeKGw.jpeg"},"timeToRead":9}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/abstracting-state-with-ngrx-facades","prev":null,"next":{"fields":{"slug":"/building-side-effects-in-ngrx"},"frontmatter":{"title":"Building Side Effects in NGRX","category":"angular"}}}}